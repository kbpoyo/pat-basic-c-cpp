#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define maxsize 10

//队列的顺序存储结构
typedef struct queue
{
	int arr[maxsize];
	int front;// 头指针  
	int rear;// 尾指针
	char s[100] ;
	 
	
 } queue;
 
 
 //创建一个队列
 void init_queue( queue*A)
 {
 	
 	printf("请输入你想创建的队列名称：\n");
 	scanf("%s",A->s); 
 	A->front = 0;
 	A->rear  = 0;
 	printf("队列 %s 初始化成功！\n" , A->s);
  }
  
  //清空一个队列
  void clear( queue * A)
  {
  	A->front = 0;
 	A->rear  = 0;
 	printf("该队列已清空！\n");
   } 
   
   //销毁一个队列
   void destroy (queue *A)
    {
    	if( A->s[0] == '\0')
    	{
    		
    		printf("该队列不存在！\n");
			return ;
		}
		else
		{
		  
		   A->s[0] = '\0';
		   printf("该队列已成功销毁！\n"); 
		   return ;
		}
	}
  
  // 得到队列长度
  int getlenth( queue*A)
  {
  	if(A->s[0] == '\0')
  	{
  		printf("队列不存在！\n");
	  }
  	int len = (A->rear - A->front + maxsize) % maxsize;
  	return len ; 
   } 
  
 //尾插一个数据到队列中
 void push_back(queue* A , int num)
 {
 	if( getlenth(A) == maxsize - 1 ) // 判断队列是否已满 
 	{
 		printf("插入失败 ，该队列已满！\n");
 		return ;
	 }
	 else if( A->s[0] == '\0')
	  {
	  	printf("队列不存在！\n");
	  	return;
	  }
	 
	 A->arr[A->rear] = num;
	 A->rear = ( A->rear + 1 ) % maxsize;//让尾指针在队列长度范围内循环起来 
	 printf("插入成功！\n");
  }
  
  //得到队列的队头元素
  int get_head(queue *A)
  {
  	if( getlenth(A) == 0 )
  	{
  		printf("队列为空！\n");
	  }
	  else if( A->s[0] == '\0')
	  {
	  	printf("队列不存在！\n");
	  }
	  else
	  {
	  	return A->arr[A->front] ;
	  }
   } 
   
   //让队头元素出队
   void pop(queue *A )
   {
   	if( getlenth(A) == 0)
   	{
   		printf("队列为空！\n");
   		return ; 
	   }
	   else if(A->s[0] == '\0')
	   {
	   	printf("队列不存在！\n");
	   }
   	
	   else
	   {
	   	printf("队头元素 %d 已出列\n" , A->arr[A->front]);
	   A->front = (A->front + 1) % maxsize;
	   
       }
	   
	} 
	
	//判断队列是否为空
	int emputy(queue *A)
	{
		if(A->front == A->rear)
		{
			return 1;
		}
		  else if(A->s[0] == '\0')
	   {
	   	  return -1;
	   }
		else
		{
			return 0;
		}
	 } 
  
  
 //打印菜单
 void show()
 {
 	printf("*************************\n");
 	printf("*****1. 创建一个队列*****\n");
 	printf("*****2. 尾插一个元素*****\n");
 	printf("*****3. 得到队头元素*****\n");
 	printf("*****4. 队头元素出列*****\n");
 	printf("*****5. 得到队列长度*****\n");
 	printf("*****6. 队列是否为空*****\n");
 	printf("*****7. 清空一个队列*****\n");
 	printf("*****8. 销毁一个队列*****\n");
 	printf("*****9. 退出        *****\n");
 	printf("*************************\n");
  } 

int main()
{
	show();
	queue*A = (queue*)malloc(sizeof(queue));  
	A->s[0] = '\0';
	int i;
	flag :
	scanf("%d" , &i);
	switch(i)
	{
		case 1:
			init_queue( A);
			break;
		case 2:
			{
				int num;
				printf("请输入想要插入的数据：\n");
				scanf("%d" , &num);
				
				push_back( A ,  num);
			}break;
		case 3:
			{
				int num = get_head(A);
				if(!emputy(A))
			{
			 printf("队头元素为： %d\n" , num );
			}
				
			    
			}break;
		case 4:
			{
				pop(A );
			
			}break;
		case 5:
		   {
				int num = getlenth(A);
				printf("队列长度为： %d\n" , num );
			}break;
		case 6:
		   {
				if(emputy(A) == 1)
				{
					printf("队列为空！\n"); 
				}
				  else if( emputy(A) == -1)
				  {
				  	printf("队列不存在！\n");
				  }
				else
				{
				printf("队列不为空！\n"  );
				} 
			}break; 
		case 7:
		    clear(A);
			break;
		case 8:
		    destroy(A);
			break;
		default :
		break; 
		  
			
			
			
	}
	if( i != 9)
	{
		goto flag;
	 } 
	
	
	
	return 0;
}
